1) How to create DB
    use inventory; ==> switched to db inventory
2) How to see which DB are you in
    db ==> inventory
3)How to see all DBs on terminal  
    show dbs ==> admin   0.000GB
                 config  0.000GB
                 local   0.000GB  
4) How to drop DB 
    db.dropDatabase();  ==> { "ok" : 1 } 
5) How to add a collection into a DB
    db.createCollection("products"); ==> { "ok" : 1 }  
6)How to drop a collection 
    db.products.drop(); ==> true
7) How to insert Document into a collection 
    a)db.prices.insertOne({ "product_name":"Laptop", "price" : 800, "tax": 32});  
8) How to insert multiple documents                        
    db.prices.insertMany([{ "product_name":"Laptop", "price" : 800, "tax": 32},{"product_name":"TV", "price + tax":345}]);
    Note: Do not forget to use brackets ==> [ ]
9) How to insert single or multiple documents by using same method
    db.prices.insert({"tax":123}); ==> WriteResult({ "nInserted" : 1 });
10)How to create more indexes
    db.prices.ensureIndex({"product_name":1});
11) How to fetch documents from a collection
    db.prices.find(); ==> It fetches all documents 
    db.prices.find().pretty(); ==> It fetches all documents in JSON pretty format 
12) var now1 = new Date(); // GMT Time
    db.prices.insert({"current_date" : now1}); 
    var now2 = ISODate();
    db.prices.insert({"current_date" : now2}); 
    var now3 = ISODate();
    var month = now3.getMonth();
    db.prices.insert({"month" : month}); 
13) How to insert past date by using ISODate() 
    db.prices.insert({"price":234, "past_date":ISODate("2020-11-23")});
14) How to READ Documents in MongoDB
    a)To read all documents ==> db.prices.find(); 
    b)To read first 2 documents ==>  db.prices.find().pretty().limit(2); 
    c)To read 2. and 3. documents ==> db.prices.find().pretty().skip(1).limit(2);
    d)To read first one ==> db.prices.find().pretty().limit(1); 
                        ==> db.prices.findOne();
    e)To read documents whose product name is Laptop AND the price is 750
                        ==> db.prices.find({$and : [{"product_name":"Laptop"}, {"price":750}]});
    f)To read documents whose product name is Laptop OR the price + tax is 345
                        ==> db.prices.find({$or : [{"product_name":"Laptop"}, {"price + tax":345}]}); 
    g)To read documents whose product name is TV
                        ==> db.prices.find({"product_name" : "TV"});  
    h)To read just prices of TVs
                        ==> db.prices.find({"product_name" : "TV"}, {"price + tax":1, "_id":0});
                        ==> {"price + tax":1, "_id":0} is called "Projection"                                                   
      To read price and tax of Laptops
                        ==> db.prices.find({"product_name" : "Laptop"}, {"price" : 1,"_id" : 0, "tax" : 1});
    i)To read documents in ascending(1) or descending(-1) order
    ==> db.prices.find({"product_name" : "Laptop"}, {"price" : 1,"_id" : 0, "tax" : 1}).sort({"price":1});  
    ==> db.prices.find({"product_name" : "Laptop"}, {"price" : 1,"_id" : 0, "tax" : 1}).sort({"price":-1}); 
    j)Comparison operators Equality ==> $eq - Less than ==> $lt - Greater than ==> $gt 
                           Less than or Equal to ==> $lte - Greater than or Equal to ==> $gte 
                           Not Equals ==> $ne - In an Array ==> $in - Not in an Array ==> $nin 
    Ex:Fetch documents whose prices are equal to 750
    ==>db.prices.find({price:{$eq:750}}); 
    ==>db.prices.find({"price":750}); 
    Ex:Fetch documents whose prices are less than or equal to 750                                   
    ==>db.prices.find({price:{$lte:750}});
    Ex:Fetch documents whose prices are greater than or equal to 750
    ==>db.prices.find({price:{$gte:750}});
    Ex:Fetch documents whose prices are one of the 600, 123, 750 
    ==>db.prices.find({price:{$in:[600, 123, 750]}});
    Ex:Fetch documents whose prices are not one of the 600, 123, 750 
    ==>db.prices.find({price:{$nin:[600, 123, 750]}});
